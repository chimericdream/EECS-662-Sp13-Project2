#lang racket
(test (eval-cfae (binop 'add (num 1) (num 2))) (num 3))
(test (eval-cfae (binop 'mul (num 2) (num 2))) (num 4))
(test (eval-cfae (if0 (num 0) (num 1) (num 2))) (num 1))
(test (eval-cfae (app (fun 'x (id 'x)) (num 5))) (num 5))
(test (eval-cfae (app (fun 'x (binop 'add (id 'x) (num 1))) (num 1))) (num 2))
(test (eval-cfae (if0 (app (fun 'x (binop 'sub (id 'x) (num 2))) (num 3))
                       (app (fun 'x (binop 'mul (id 'x) (num 2))) (num 10))
                       (app (fun 'x (binop 'div (id 'x) (num 2))) (num 8)))) (num 4))
(test (eval-cfae (app (if0 (num 0)
                            (fun 'x (binop 'add (id 'x) (num 1)))
                            (fun 'x (binop 'add (id 'x) (num 2))))
                       (num 0)))
      (num 1))
(test (eval-cfae (app (fun 'x (app (fun 'y (binop '+ (id 'x) (id 'y))) (num 3))) (num 2))) 
      (num 5))
(test (eval-cfae (fun 'x (binop 'add (id 'x) (num 1)))) (fun 'x (binop 'add (id 'x) (num 1))))
(test (eval-cfae (fun 'x (id 'x))) (fun 'x (id 'x)))

(test (eval-cfwae (cond0 (num 1) (num 2) (num 0) (num 15) (num 0))) (num 15))
(test (eval-cfwae (with x (num 10) (binop 'add (id 'x) (num 5)))) (num 15))
(test (eval-cfwae (with 'add1 (fun 'x (binop 'add (id 'x) (num 1)))
                      (cond0 (app add1 (num 0)) (num 5)
                             (num 3) (num 4)
                             (num 0) (app add1 (num 2))
                             (num 2))))
      (num 3))